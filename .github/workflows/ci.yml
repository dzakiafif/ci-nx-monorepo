name: Build Affected Apps with Matrix

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.affected.outputs.apps }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Fetch base branch
        run: |
          # Fetch the base branch for comparison
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            echo "BASE_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
          else
            git fetch origin main:main 2>/dev/null || git fetch origin master:master || true
            # Set base branch based on what exists
            if git show-ref --verify --quiet refs/heads/main; then
              echo "BASE_BRANCH=main" >> $GITHUB_ENV
            elif git show-ref --verify --quiet refs/heads/master; then
              echo "BASE_BRANCH=master" >> $GITHUB_ENV
            else
              echo "BASE_BRANCH=HEAD~1" >> $GITHUB_ENV
            fi
          fi
          ref: ${{ github.head_ref }}
      
      - name: Fetch base branch
        run: |
          # Fetch the base branch for comparison
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            echo "BASE_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
          else
            git fetch origin main:main 2>/dev/null || git fetch origin master:master || true
            # Set base branch based on what exists
            if git show-ref --verify --quiet refs/heads/main; then
              echo "BASE_BRANCH=main" >> $GITHUB_ENV
            elif git show-ref --verify --quiet refs/heads/master; then
              echo "BASE_BRANCH=master" >> $GITHUB_ENV
            else
              echo "BASE_BRANCH=HEAD~1" >> $GITHUB_ENV
            fi
          fi
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: |
          if ! pnpm install --frozen-lockfile; then
            echo "Frozen lockfile failed, installing with updated lockfile..."
            pnpm install --no-frozen-lockfile
          fi
      
      - name: Get affected apps
        id: affected
        run: |
          set -e
          
          # Get affected projects with proper base branch
          AFFECTED_OUTPUT=$(pnpm nx show projects --affected --type=app --base=$BASE_BRANCH 2>/dev/null || echo "")
          
          if [ -z "$AFFECTED_OUTPUT" ]; then
            echo "No affected apps found, will build all apps"
            ALL_APPS=$(pnpm nx show projects --type=app --json 2>/dev/null || echo "[]")
            echo "apps=$ALL_APPS" >> $GITHUB_OUTPUT
            echo "All apps: $ALL_APPS"
          else
            # Convert to JSON array
            AFFECTED_APPS=$(echo "$AFFECTED_OUTPUT" | jq -R -s -c 'split("\n") | map(select(. != ""))')
            echo "apps=$AFFECTED_APPS" >> $GITHUB_OUTPUT
            echo "Affected apps: $AFFECTED_APPS"
          fi

  build:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.affected-apps != '[]'
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-changes.outputs.affected-apps) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: |
          if ! pnpm install --frozen-lockfile; then
            echo "Frozen lockfile failed, installing with updated lockfile..."
            pnpm install --no-frozen-lockfile
          fi
      
      - name: Build ${{ matrix.app }}
        run: pnpm nx build ${{ matrix.app }}
      
      - name: Test ${{ matrix.app }}
        run: pnpm nx test ${{ matrix.app }}